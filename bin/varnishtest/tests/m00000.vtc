varnishtest "Test std & debug vmod"

server s1 {
	rxreq
	expect req.http.encrypted == "ROT52"
	txresp -hdr "foo: bAr" -hdr "bar: fOo" -bodylen 4
} -start

varnish v1 -vcl+backend {
	import std;
	import debug;

	sub vcl_init {
		new obj = debug.obj();
	}

	sub vcl_recv {
		debug.rot52(req);
	}

	sub vcl_deliver {
		set resp.http.foo = std.toupper(resp.http.foo);
		set resp.http.bar = std.tolower(resp.http.bar);
		set resp.http.who = debug.author(phk);
		debug.test_priv_call();
		debug.test_priv_vcl();
		obj.test_priv_call();
		obj.test_priv_vcl();
		std.log("VCL" + " initiated " + "log");
		std.syslog(8 + 7, "Somebody runs varnishtest");
		debug.rot52(resp);
	}
} -start

client c1 {
	txreq -url "/bar"
	rxresp
	expect resp.status == 200
	expect resp.bodylen == "4"
	expect resp.http.foo == "BAR"
	expect resp.http.bar == "foo"
	expect resp.http.encrypted == "ROT52"
} -run

logexpect l1 -v v1 -g raw -d 1 {
	expect * 1001 VCL_call		{^DELIVER}
	expect 0 =    RespUnset	{^foo: bAr}
	expect 0 =    RespHeader	{^foo: BAR}
	expect 0 =    RespUnset	{^bar: fOo}
	expect 0 =    RespHeader	{^bar: foo}
	expect 0 =    RespHeader	{^who: Poul-Henning}
	expect 0 =    VCL_Log		{^VCL initiated log}
	expect 0 =    RespHeader	{^Encrypted: ROT52}
	expect 0 =    VCL_return	{^deliver}
} -start

logexpect l1 -wait

varnish v1 -errvcl {Wrong enum value.  Expected one of:} {
	import debug;
	sub vcl_deliver {
		set resp.http.who = debug.author(ENUM);
	}
}

varnish v1 -errvcl {Wrong enum value.  Expected one of:} {
	import debug;
	sub vcl_deliver {
		set resp.http.who = debug.author(slink);
	}
}

varnish v1 -errvcl {Wrong argument type.  Expected REAL.  Got STRING.} {
	import std;
	sub vcl_deliver {
		set resp.http.who = std.random("foo", "bar");
	}
}
