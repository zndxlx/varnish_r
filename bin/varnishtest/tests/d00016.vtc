varnishtest "shard director/int reconfiguration outside init"

server s1 {
} -start

server s2 {
} -start

server s3 {
	rxreq
	txresp -body "xiuFi3Pe"
} -start

varnish v1 -vcl+backend {
	import std;
	import directors;

	sub vcl_init {
		new vd = directors.shard();
		new vd2 = directors.shard();
		vd.debug(3);
	}

	sub vcl_recv {
		std.log("-- invalid replicas");
		if (!vd.reconfigure(replicas=0)) {
			std.log("reconfigure failed");
		}

		std.log("-- no changes - no debug output");
		if (!vd.reconfigure(replicas=25)) {
			std.log("reconfigure failed");
		}

		std.log("-- no backends");
		if (!vd.clear()) {
			std.log("clear failed");
		}
		if (!vd.reconfigure(replicas=25)) {
			std.log("reconfigure failed");
		}

		std.log("-- one backend");
		if (!vd.add_backend(s1)) {
			std.log("add s1 failed");
		}
		if (!vd.reconfigure(replicas=1)) {
			std.log("reconfigure failed");
		}

		std.log("-- no change - no output");
		if (!vd.reconfigure(replicas=1)) {
			std.log("reconfigure failed");
		}

		std.log("-- change, clear, no backends");
		# change, then clear
		vd.add_backend(s1);
		vd.add_backend(s2);
		vd.clear();
		vd.add_backend(s1);
		vd.add_backend(s2);
		vd.clear();
		if (!vd.reconfigure()) {
			std.log("reconfigure failed");
		}

		std.log("-- duplicate add");
		vd.clear();
		vd.add_backend(s1);
		vd.add_backend(s2);
		vd.add_backend(s1);
		if (!vd.reconfigure(replicas=1)) {
			std.log("reconfigure failed");
		}

		std.log("-- duplicate add with idents");
		vd.clear();
		vd.add_backend(s1);
		vd.add_backend(s1, ident="s1_1");
		vd.add_backend(s1, ident="s1_2");
		vd.add_backend(s2);
		vd.add_backend(s2, ident="s1");
		vd.add_backend(s2, ident="s1_1");
		vd.add_backend(s2, ident="s1_2");
		if (!vd.reconfigure(replicas=1)) {
			std.log("reconfigure failed");
		}

		std.log("-- remove s1_2 specifically");
		vd.remove_backend(ident="s1_2");
		if (!vd.reconfigure(replicas=1)) {
			std.log("reconfigure failed");
		}

		std.log("-- remove all instances of s1");
		vd.remove_backend(s1);
		if (!vd.reconfigure(replicas=1)) {
			std.log("reconfigure failed");
		}

		std.log("-- re-add some - no 2nd director");
		vd.clear();
		vd.add_backend(s3, "1");
		vd.add_backend(s3, "2");
		vd.add_backend(s3, "3");
		vd2.clear();
		vd.add_backend(s3, "4");
		vd.add_backend(s3, "5");
		vd.add_backend(s3, "6");
		vd.add_backend(s3, "7");
		vd.add_backend(s3, "8");
		vd.add_backend(s3, "9");
		if (!vd.reconfigure(replicas=1)) {
			std.log("reconfigure failed");
		}

		std.log("-- remove second-last");
		vd.remove_backend(ident="8");
		if (!vd.reconfigure(replicas=1)) {
			std.log("reconfigure failed");
		}

		std.log("-- remove last");
		vd.remove_backend(ident="9");
		if (!vd.reconfigure(replicas=1)) {
			std.log("reconfigure failed");
		}

		std.log("-- END");

		set req.backend_hint = vd.backend();
		return(pass);
	}

} -start

# this is identical to v01100.vtc, but split into two logexps

logexpect l1 -v v1 -g raw -d 1 {
	expect * 1001    VCL_Log {^-- invalid replicas$}
	expect 0 1001    Error   {^shard vd: .reconfigure.. invalid replicas argument 0}
	expect 0 1001    VCL_Log {^reconfigure failed}

	expect 0 1001    VCL_Log {^-- no changes - no debug output$}

	expect 0 1001    VCL_Log {^-- no backends$}
	expect 0 1001    Error   {^shard vd: .reconfigure.. no backends}
	expect 0 1001    VCL_Log {^reconfigure failed}

	expect 0 1001    VCL_Log {^-- one backend$}

	expect 0 1001    VCL_Log {^-- no change - no output$}

	expect 0 1001    VCL_Log {^-- change, clear, no backends$}
	expect 0 1001    Error   {^shard vd: .reconfigure.. no backends}
	expect 0 1001    VCL_Log {^reconfigure failed}

	expect 0 1001    VCL_Log {^-- duplicate add$}
	expect 0 1001    Error   {^shard vd: .notice. backend s1 already exists - skipping$}
	expect 0 1001    VCL_Log {^-- duplicate add with idents$}
	expect 0 1001    Error   {^shard vd: .notice. backend s1 already exists - skipping}
	expect 0 1001    Error   {^shard vd: .notice. backend s1/s1_1 already exists - skipping}
	expect 0 1001    Error   {^shard vd: .notice. backend s1/s1_2 already exists - skipping}
	expect 0 1001    VCL_Log {^-- remove s1_2 specifically$}
	expect 0 1001    VCL_Log {^-- remove all instances of s1$}
	expect 0 1001    VCL_Log {^-- re-add some - no 2nd director$}
	expect 0 1001    Error   {^shard vd2: cannot change more than}
	expect 0 1001    VCL_Log {^-- remove second-last$}
	expect 0 1001    VCL_Log {^-- remove last$}
	expect 0 1001    VCL_Log {^-- END$}
}

logexpect l2 -v v1 -g raw -d 1 {
	expect *    0    Debug   {^shard:.*point = f08ad325, host =  0}
	expect 0    0    Debug   {^shard:.*point = 6e040182, host =  1}
	expect 0    0    Debug   {^shard:.*point = f08ad325, host =  0}
	expect 0    0    Debug   {^shard:.*point = 6e040182, host =  3}
	expect 0    0    Debug   {^shard:.*point = 732c7bbe, host =  2}
	expect 0    0    Debug   {^shard:.*point = bae80b0b, host =  1}
	expect 0    0    Debug   {^shard:.*point = f08ad325, host =  0}
	expect 0    0    Debug   {^shard:.*point = 6e040182, host =  2}
	expect 0    0    Debug   {^shard:.*point = bae80b0b, host =  1}
	expect 0    0    Debug   {^shard:.*point = f08ad325, host =  0}
	expect 0    0    Debug   {^shard:.*point = 6e040182, host =  0}
	expect 0    0    Debug   {^shard:.*point =  3d1fe97, host =  3}
	expect 0    0    Debug   {^shard:.*point =  a25a43b, host =  6}
	expect 0    0    Debug   {^shard:.*point = 2b20d9a2, host =  1}
	expect 0    0    Debug   {^shard:.*point = 6337e62c, host =  8}
	expect 0    0    Debug   {^shard:.*point = c9803f17, host =  5}
	expect 0    0    Debug   {^shard:.*point = d51dafe6, host =  0}
	expect 0    0    Debug   {^shard:.*point = eb74a7d5, host =  4}
	expect 0    0    Debug   {^shard:.*point = f493ce58, host =  2}
	expect 0    0    Debug   {^shard:.*point = fc1a5162, host =  7}
	expect 0    0    Debug   {^shard:.*point =  3d1fe97, host =  3}
	expect 0    0    Debug   {^shard:.*point =  a25a43b, host =  6}
	expect 0    0    Debug   {^shard:.*point = 2b20d9a2, host =  1}
	expect 0    0    Debug   {^shard:.*point = 6337e62c, host =  7}
	expect 0    0    Debug   {^shard:.*point = c9803f17, host =  5}
	expect 0    0    Debug   {^shard:.*point = d51dafe6, host =  0}
	expect 0    0    Debug   {^shard:.*point = eb74a7d5, host =  4}
	expect 0    0    Debug   {^shard:.*point = f493ce58, host =  2}
	expect 0    0    Debug   {^shard:.*point =  3d1fe97, host =  3}
	expect 0    0    Debug   {^shard:.*point =  a25a43b, host =  6}
	expect 0    0    Debug   {^shard:.*point = 2b20d9a2, host =  1}
	expect 0    0    Debug   {^shard:.*point = c9803f17, host =  5}
	expect 0    0    Debug   {^shard:.*point = d51dafe6, host =  0}
	expect 0    0    Debug   {^shard:.*point = eb74a7d5, host =  4}
	expect 0    0    Debug   {^shard:.*point = f493ce58, host =  2}
}

logexpect l1 -start
logexpect l2 -start

client c1 {
	txreq
	rxresp
	expect resp.body == "xiuFi3Pe"
} -run

logexpect l1 -wait
logexpect l2 -wait
