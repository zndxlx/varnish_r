#
# Copyright (c) 2010-2015 Varnish Software AS
# All rights reserved.
#
# Author: Poul-Henning Kamp <phk@FreeBSD.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

$Module debug 3 Development, test and debug

DESCRIPTION
===========

This vmod is used to develop, test and debug the various aspects
of VMOD handling in Varnish.


$Event event_function

You are not supposed to be able to see this text in the .RST

$Function VOID panic(STRING_LIST)

Don't.

$Function STRING author(ENUM { phk, des, kristian, mithrandir } person="phk",
			ENUM { phk, slink, geoff } someone="phk")

Test function for ENUM arguments

$Function VOID test_priv_call(PRIV_CALL)

Test function for call private pointers

$Function VOID test_priv_vcl(PRIV_VCL)

Test function for VCL private pointers

$Function STRING test_priv_task(PRIV_TASK, STRING s="")

Test function for TASK private pointers

$Function STRING test_priv_top(PRIV_TOP, STRING)

Test function for TOP private pointers

$Function BLOB str2blob(STRING src="foo")

Turn a string into a blob

$Function STRING blob2hex(BLOB src)

Hexdump a blob

$Function BACKEND no_backend()

Fails at backend selection

$Function STEVEDORE no_stevedore()

Fails at storage selection.

$Object obj(STRING string="default", ENUM { one, two, three } number="one")

Test object

.. NOTE: .enum before .foo as part of test r01332.vtc
$Method VOID .enum(ENUM { phk, des, kristian, mithrandir, martin })

Testing that enums work as part of object and that the parser isn't
(too) buggy.

$Method STRING .string()

getter for string

$Method STRING .number()

getter for number

$Method STRING .foo(STRING why)

Foo indeed.

$Method TIME .date()

You never know when you need a date.

$Method VOID .test_priv_call(PRIV_CALL)

Test method for call private pointers

Objects share the PRIV_* state with other objects and methods from the
same vmod - IOW the PRIV_* state is per vmod, not per object.

$Method VOID .test_priv_vcl(PRIV_VCL)

Test method for VCL private pointers

Objects share the PRIV_* state with other objects and methods from the
same vmod - IOW the PRIV_* state is per vmod, not per object.

$Method STRING .test_priv_task(PRIV_TASK, STRING s="")

Test method for TASK private pointers

Objects share the PRIV_* state with other objects and methods from the
same vmod - IOW the PRIV_* state is per vmod, not per object.

$Method STRING .test_priv_top(PRIV_TOP, STRING)

$Function VOID rot52(HTTP hdr)

Encrypt the HTTP header with quad-ROT13 encryption,
(this is approx 33% better than triple-DES).

$Function STRING argtest(
	  STRING one, REAL two =2, STRING three= "3",
	  STRING comma="," , INT four = 4 )

$Function INT vre_limit()

$Function VOID register_obj_events(PRIV_VCL)

Register the vmod to receive expiry callbacks

$Function VOID fail()

Function to fail vcl code.  (See also: RFC748)

$Function VOID sleep(DURATION)

Sleep the current worker thread.

$Object dyn(STRING addr, STRING port)

Dynamically create a single-backend director, addr and port must not be empty.

$Method BACKEND .backend()

Return the dynamic backend.

$Method VOID .refresh(STRING addr, STRING port)

Dynamically refresh & (always!) replace the backend by a new one.

$Function VOID workspace_allocate(ENUM { client, backend, session, thread },
	  INT size)

Allocate and zero out SIZE bytes from a workspace.
If SIZE is negative, all but that many bytes are allocated from the workspace.
(NB: Beware of the alignment imposed on workspace allocations.)

$Function BOOL workspace_overflowed(ENUM { client, backend, session, thread })

Return if the workspace overflow mark is set or not.

$Function VOID workspace_overflow(ENUM { client, backend, session, thread })

Mark a workspace as overflowed.

$Function INT workspace_free(ENUM { client, backend, session, thread })

Find how much unallocated space there is left in a workspace.

$Function VOID workspace_snap(ENUM { client, backend, session, thread})

Snapshot the named workspace. Only one snapshot may be active at a time.

$Function VOID workspace_reset(ENUM { client, backend, session, thread })

Reset to the previous snapshot of a workspace, taken from debug.workspace_snap.

$Function VOID vcl_release_delay(DURATION)

Hold a reference to the VCL when it goes cold for the given delay.

$Function BOOL match_acl(ACL acl, IP ip)

Perform an IP match against a named ACL.

$Function BOOL barrier_sync(STRING)

Synchronize with a varnishtest shared barrier.

$Function VOID test_probe(PROBE probe, PROBE same = 0)

Only here to make sure probe definitions are passed properly.

$Function INT typesize(STRING)

Returns the size in bytes of a collection of C-datatypes.

* 'p' = pointer
* 'i' = int
* 'd' = double
* 'f' = float
* 'l' = long
* 's' = short
* 'z' = size_t
* 'o' = off_t
* 'j' = intmax_t
